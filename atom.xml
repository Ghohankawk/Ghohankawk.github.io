<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闻道</title>
  <subtitle>闻道有先后，术业有专攻，如是而已</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ghohankawk.github.io/"/>
  <updated>2017-06-13T13:02:42.749Z</updated>
  <id>http://ghohankawk.github.io/</id>
  
  <author>
    <name>韩坤</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汤姆大叔的深入理解JavaScript读后感三（设计模式篇）</title>
    <link href="http://ghohankawk.github.io/2017/06/13/tomdashu3/"/>
    <id>http://ghohankawk.github.io/2017/06/13/tomdashu3/</id>
    <published>2017-06-13T12:02:55.051Z</published>
    <updated>2017-06-13T13:02:42.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是tom大叔的JavaScript系列的读书观后感3"><a href="#今天要分享的内容是tom大叔的JavaScript系列的读书观后感3" class="headerlink" title="今天要分享的内容是tom大叔的JavaScript系列的读书观后感3"></a>今天要分享的内容是tom大叔的JavaScript系列的读书观后感3</h1><p>挑选大叔里面，个人自己喜欢的设计模式实现</p>
<h1 id="第二十五部分，设计模式之单例模式"><a href="#第二十五部分，设计模式之单例模式" class="headerlink" title="第二十五部分，设计模式之单例模式"></a>第二十五部分，设计模式之单例模式</h1><p>在传统开发工程师眼里，单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function Universe() &#123;</div><div class="line"></div><div class="line">    // 缓存的实例</div><div class="line">    var instance = this;</div><div class="line"></div><div class="line">    // 其它内容</div><div class="line">    this.start_time = 0;</div><div class="line">    this.bang = &quot;Big&quot;;</div><div class="line"></div><div class="line">    // 重写构造函数</div><div class="line">    Universe = function () &#123;</div><div class="line">        return instance;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试</div><div class="line">var uni = new Universe();</div><div class="line">var uni2 = new Universe();</div><div class="line">uni.bang = &quot;123&quot;;</div><div class="line">console.log(uni === uni2); // true</div><div class="line">console.log(uni2.bang); // 123</div></pre></td></tr></table></figure>
<p>这个设计模式，简单明了，通过this进行缓存，剩下了去判断不存在的麻烦</p>
<h1 id="第二十六部分，设计模式之构造函数模式"><a href="#第二十六部分，设计模式之构造函数模式" class="headerlink" title="第二十六部分，设计模式之构造函数模式"></a>第二十六部分，设计模式之构造函数模式</h1><p>构造函数用于创建特定类型的对象——不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function Car(model, year, miles) &#123;</div><div class="line">    this.model = model;</div><div class="line">    this.year = year;</div><div class="line">    this.miles = miles;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</div><div class="line">主要是用来避免重写定义原型prototype对象</div><div class="line">*/</div><div class="line">Car.prototype.output= function () &#123;</div><div class="line">    return this.model + &quot;走了&quot; + this.miles + &quot;公里&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var tom = new Car(&quot;大叔&quot;, 2009, 20000);</div><div class="line">var dudu = new Car(&quot;Dudu&quot;, 2010, 5000);</div><div class="line"></div><div class="line">console.log(tom.output());</div><div class="line">console.log(dudu.output());</div></pre></td></tr></table></figure></p>
<h1 id="第二十七部分，设计模式之建造者模式"><a href="#第二十七部分，设计模式之建造者模式" class="headerlink" title="第二十七部分，设计模式之建造者模式"></a>第二十七部分，设计模式之建造者模式</h1><p>建造者模式可以将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function getBeerById(id, callback) &#123;</div><div class="line">    // 使用ID来请求数据，然后返回数据.</div><div class="line">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function (resp) &#123;</div><div class="line">        // callback调用 response</div><div class="line">        callback(resp.responseText);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var el = document.querySelector(&apos;#test&apos;);</div><div class="line">el.addEventListener(&apos;click&apos;, getBeerByIdBridge, false);</div><div class="line"></div><div class="line">function getBeerByIdBridge(e) &#123;</div><div class="line">    getBeerById(this.id, function (beer) &#123;</div><div class="line">        console.log(&apos;Requested Beer: &apos; + beer);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建造者模式主要用于“分步骤构建一个复杂的对象”，在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化，其优点是：建造者模式的“加工工艺”是暴露的，这样使得建造者模式更加灵活，并且建造者模式解耦了组装过程和创建具体部件，使得我们不用去关心每个部件是如何组装的。<br>也就是说，上面的函数中，getBeerById函数是稳定的，写了一个构建过程，而具体的构建细节由另外一个回调函数决定</p>
<p>其实，我觉得，这个部分，不属于java里面的建造者模式，更是一种模板模式，可能个人理解不同吧，反正大叔的意思，就是这种样子</p>
<h1 id="第二十八部分，设计模式之工厂模式"><a href="#第二十八部分，设计模式之工厂模式" class="headerlink" title="第二十八部分，设计模式之工厂模式"></a>第二十八部分，设计模式之工厂模式</h1><pre><code>什么时候使用工厂模式

以下几种情景下工厂模式特别有用：

对象的构建十分复杂
需要依赖具体环境创建不同实例
处理大量具有相同属性的小对象
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var productManager = &#123;&#125;;</div><div class="line"></div><div class="line">productManager.createProductA = function () &#123;</div><div class="line">    console.log(&apos;ProductA&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">productManager.createProductB = function () &#123;</div><div class="line">    console.log(&apos;ProductB&apos;);</div><div class="line">&#125;</div><div class="line">        </div><div class="line">productManager.factory = function (typeType) &#123;</div><div class="line">    return new productManager[typeType];</div><div class="line">&#125;</div><div class="line"></div><div class="line">productManager.factory(&quot;createProductA&quot;);</div></pre></td></tr></table></figure>
<p>一句话，就是根据不同的类型，调用不同的子类，进行实例化一个对象</p>
<h1 id="第二十九部分，设计模式之装饰者模式"><a href="#第二十九部分，设计模式之装饰者模式" class="headerlink" title="第二十九部分，设计模式之装饰者模式"></a>第二十九部分，设计模式之装饰者模式</h1><p>装饰者用于通过重载方法的形式添加新功能，该模式可以在被装饰者前面或者后面加上自己的行为以达到特定的目的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var tree = &#123;&#125;;</div><div class="line">tree.decorate = function () &#123;</div><div class="line">    console.log(&apos;Make sure the tree won\&apos;t fall&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tree.getDecorator = function (deco) &#123;</div><div class="line">    tree[deco].prototype = this;</div><div class="line">    return new tree[deco];</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tree.RedBalls = function () &#123;</div><div class="line">    this.decorate = function () &#123;</div><div class="line">        this.RedBalls.prototype.decorate(); // 第7步：先执行原型（这时候是Angel了）的decorate方法</div><div class="line">        console.log(&apos;Put on some red balls&apos;); // 第8步 再输出 red</div><div class="line">        // 将这2步作为RedBalls的decorate方法</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tree.BlueBalls = function () &#123;</div><div class="line">    this.decorate = function () &#123;</div><div class="line">        this.BlueBalls.prototype.decorate(); // 第1步：先执行原型的decorate方法，也就是tree.decorate()</div><div class="line">        console.log(&apos;Add blue balls&apos;); // 第2步 再输出blue</div><div class="line">        // 将这2步作为BlueBalls的decorate方法</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tree.Angel = function () &#123;</div><div class="line">    this.decorate = function () &#123;</div><div class="line">        this.Angel.prototype.decorate(); // 第4步：先执行原型（这时候是BlueBalls了）的decorate方法</div><div class="line">        console.log(&apos;An angel on the top&apos;); // 第5步 再输出angel</div><div class="line">        // 将这2步作为Angel的decorate方法</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tree = tree.getDecorator(&apos;BlueBalls&apos;); // 第3步：将BlueBalls对象赋给tree，这时候父原型里的getDecorator依然可用</div><div class="line">tree = tree.getDecorator(&apos;Angel&apos;); // 第6步：将Angel对象赋给tree，这时候父原型的父原型里的getDecorator依然可用</div><div class="line">tree = tree.getDecorator(&apos;RedBalls&apos;); // 第9步：将RedBalls对象赋给tree</div><div class="line"></div><div class="line">tree.decorate(); // 第10步：执行RedBalls对象的decorate方法</div></pre></td></tr></table></figure>
<p>这段代码，主要是在于，<br>        tree.getDecorator 这段函数设计精妙<br>        他让tree接受一个新的函数，而每次都用这个新函数去替代之前的函数，并且同时让原型指向前一个，实现了一个<br>        继承关系，比如A-》B-》C，最开始tree是A，然后，放入一个，就变成B，之后为C</p>
<h1 id="第三十部分，设计模式之构造函数模式"><a href="#第三十部分，设计模式之构造函数模式" class="headerlink" title="第三十部分，设计模式之构造函数模式"></a>第三十部分，设计模式之构造函数模式</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是tom大叔的JavaScript系列的读书观后感3&quot;&gt;&lt;a href=&quot;#今天要分享的内容是tom大叔的JavaScript系列的读书观后感3&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是tom大叔的JavaScrip
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汤姆大叔的深入理解JavaScript读后感二（17——24节）</title>
    <link href="http://ghohankawk.github.io/2017/06/13/tomdashu2/"/>
    <id>http://ghohankawk.github.io/2017/06/13/tomdashu2/</id>
    <published>2017-06-13T03:23:16.482Z</published>
    <updated>2017-06-13T11:44:04.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是tom大叔的JavaScript系列的读书观后感2"><a href="#今天要分享的内容是tom大叔的JavaScript系列的读书观后感2" class="headerlink" title="今天要分享的内容是tom大叔的JavaScript系列的读书观后感2"></a>今天要分享的内容是tom大叔的JavaScript系列的读书观后感2</h1><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=527602&auto=1&height=66"></iframe></p>
<h1 id="第十七部分，面向对象编程之概论"><a href="#第十七部分，面向对象编程之概论" class="headerlink" title="第十七部分，面向对象编程之概论"></a>第十七部分，面向对象编程之概论</h1><p>我们有必要掌握一些OOP基本的特征，并澄清概论中的主要概念。主要讨论封装，继承，多态，接口，那些传统的面向对象概念，可以忽略不看，不影响</p>
<h1 id="第十八部分，面向对象编程之ECMAScript实现（推荐）"><a href="#第十八部分，面向对象编程之ECMAScript实现（推荐）" class="headerlink" title="第十八部分，面向对象编程之ECMAScript实现（推荐）"></a>第十八部分，面向对象编程之ECMAScript实现（推荐）</h1><p>总结如下：</p>
<pre><code>1. 原始值类型
   回头来看6中用于ECMAScript程序的数据类型，前5种是原始值类型，包括Undefined、Null、Boolean、String、Number、Object。
2. 有必要需要注意的是规范还区分了这内置对象、元素对象和宿主对象。
所有ECMAScript实现的对象都是原生对象（其中一些是内置对象、一些在程序执行的时候创建，例如用户自定义对象）。内置对象是原生对象的一个子集、是在程序开始之前内置到ECMAScript里的（例如，parseInt, Match等）。所有的宿主对象是由宿主环境提供的，通常是浏览器，并可能包括如window、alert等。
也有对象是由特殊的内置构造函数创建： Function（函数对象构造器）、Array（数组构造器） RegExp（正则表达式构造器）、Math（数学模块）、 Date（日期的构造器）等等，这些对象也是Object对象类型的值
3. 字面量Literal

   对于三个对象的值：对象（object）,数组（array）和正则表达式（regular expression）
4. 然而，如果我们彻底改变函数的prototype属性（通过分配一个新的对象），那原始构造函数的引用就是丢失，这是因为我们创建的对象不包括constructor属性：
function A() {}
A.prototype = {
  x: 10
};

var a = new A();
alert(a.x); // 10
alert(a.constructor === A); // false!
因此，对函数的原型引用需要手工恢复：

function A() {}
A.prototype = {
  constructor: A,
  x: 10
};

var a = new A();
alert(a.x); // 10
alert(a.constructor === A); // true
5. a.[[Prototype]] ----&gt; Prototype &lt;---- A.prototype

   此外， 实例的[[Prototype]]值确实是在构造函数的prototype属性上获取的。

   然而，提交prototype属性不会影响已经创建对象的原型（只有在构造函数的prototype属性改变的时候才会影响到)，就是说新创建的对象才有有新的原型，而已创建对象还是引用到原来的旧原型（这个原型已经不能被再被修改了）。
  对象的原型是对象的创建的时候创建的，并且在此之后不能修改为新的对象，如果依然引用到同一个对象，可以通过构造函数的显式prototype引用，对象创建以后，只能对原型的属性进行添加或修改。

  这个地方，原型链，特别难理解，详细的看第一篇，观后感的，原型链的，链接，那个是非常详细的说明 
6. 有误解：

   if (foo instanceof Foo) {
     ...
   }
   这不是用来检测对象foo是否是用Foo构造函数创建的，
所有instanceof运算符只需要一个对象属性——foo.[[Prototype]]，在原型链中从Foo.prototype开始检查其是否存在。

7. alert(1..toString()); // &quot;1&quot;，不是语法错误
   大部分程序里使用原型是用来存储对象的方法、默认状态和共享对象的属性。
</code></pre><h1 id="第十九部分，求值策略-Evaluation-strategy"><a href="#第十九部分，求值策略-Evaluation-strategy" class="headerlink" title="第十九部分，求值策略(Evaluation strategy)"></a>第十九部分，求值策略(Evaluation strategy)</h1><p>很多程序员都确信在JavaScript中（甚至其它一些语言)，对象是按引用传参，而原始值类型按值传参</p>
<pre><code>1. 按值传递
   按值传递，很多开发人员都很了解了，参数的值是调用者传递的对象值的拷贝(copy of value），函数内部改变参数的值不会影响到外面的对象（该参数在外面的值），一般来说，是重新分配了新内存(我们不关注分配内存是怎么实现的——也是是栈也许是动态内存分配），该新内存块的值是外部对象的拷贝，并且它的值是用到函数内部的。
2. 按引用传递
   另外一个众所周知的按引用传递接收的不是值拷贝，而是对象的隐式引用，如该对象在外部的直接引用地址。函数内部对参数的任何改变都是影响该对象在函数外部的值，因为两者引用的是同一个对象，也就是说：这时候参数就相当于外部对象的一个别名。
3. 按共享传递（Call by sharing）
最重要的区别就是：函数内部给参数重新赋新值不会影响到外部的对象（和上例按引用传递的case），但是因为该参数是一个地址拷贝，所以在外面访问和里面访问的都是同一个对象（例如外部的该对象不是想按值传递一样完全的拷贝),改变该参数对象的属性值将会影响到外部的对象。
4. 现在我们知道了ECMAScript中将对象作为参数传递的策略了——按共享传递：修改参数的属性将会影响到外部，而重新赋值将不会影响到外部对象
传递的是引用的拷贝（地址副本）

再强调一下，这里所说对象的值是地址（address），而不是对象结构本身，将变量赋值给另外一个变量——是赋值值的引用。因此两个变量引用的是同一个内存地址。下一个赋值却是新地址，是解析与旧对象的地址绑定，然后绑定到新对象的地址上，这就是和按引用传递的最重要区别。
</code></pre><h1 id="第二十部分，《你真懂JavaScript吗？》答案详解"><a href="#第二十部分，《你真懂JavaScript吗？》答案详解" class="headerlink" title="第二十部分，《你真懂JavaScript吗？》答案详解"></a>第二十部分，《你真懂JavaScript吗？》答案详解</h1><p>总结如下：</p>
<pre><code>1.  题目1

    if (!(&quot;a&quot; in window)) {
        var a = 1;
    }
    alert(a);
   答案是undefined
2. var a = 1,
       b = function a(x) {
           x &amp;&amp; a(--x);
       };
   alert(a);
   答案1
3. function a(x) {
       return x * 2;
   }
   var a;
   alert(a);
   答案 a函数
4. function b(x, y, a) {
       arguments[2] = 10;
       alert(a);
   }
   b(1, 2, 3);
   答案是10
5. function a() {
       alert(this);
   }
   a.call(null);
    答案是window
</code></pre><h1 id="第二十一部分，S-O-L-I-D五大原则之接口隔离原则ISP"><a href="#第二十一部分，S-O-L-I-D五大原则之接口隔离原则ISP" class="headerlink" title="第二十一部分，S.O.L.I.D五大原则之接口隔离原则ISP"></a>第二十一部分，S.O.L.I.D五大原则之接口隔离原则ISP</h1><p>没看懂，基本不用看</p>
<h1 id="第二十二部分，S-O-L-I-D五大原则之依赖倒置原则DIP"><a href="#第二十二部分，S-O-L-I-D五大原则之依赖倒置原则DIP" class="headerlink" title="第二十二部分，S.O.L.I.D五大原则之依赖倒置原则DIP]"></a>第二十二部分，S.O.L.I.D五大原则之依赖倒置原则DIP]</h1><p>稍微看懂了，估计是因为java看多了，ioc，基本不用看</p>
<h1 id="第二十三部分，JavaScript与DOM（上）——也适用于新手"><a href="#第二十三部分，JavaScript与DOM（上）——也适用于新手" class="headerlink" title="第二十三部分，JavaScript与DOM（上）——也适用于新手"></a>第二十三部分，JavaScript与DOM（上）——也适用于新手</h1><pre><code>最重要的是Element, Text, Document。

 Element节点在页面里展示的是一个元素，所以如果你有段落元素(&lt;p&gt;)，你可以通过这个DOM节点来访问。
 Text节点在页面里展示的所有文本相关的元素，所以如果你的段落有文本在里面的话，你可以直接通过DOM的Text节点来访问这个文本
 Document节点代表是整个文档，它是DOM的根节点。

nodeType类型，1是元素，2是属性，3是text节点，详细的type类型可以通过此地址：

    Node.ELEMENT_NODE == 1
    Node.ATTRIBUTE_NODE == 2
    Node.TEXT_NODE == 3
    Node.CDATA_SECTION_NODE == 4
    Node.ENTITY_REFERENCE_NODE == 5
    Node.ENTITY_NODE == 6
    Node.PROCESSING_INSTRUCTION_NODE == 7
    Node.COMMENT_NODE == 8
    Node.DOCUMENT_NODE == 9
    Node.DOCUMENT_TYPE_NODE == 10
    Node.DOCUMENT_FRAGMENT_NODE == 11
    Node.NOTATION_NODE == 12
</code></pre><h1 id="第二十四部分，JavaScript与DOM（下）"><a href="#第二十四部分，JavaScript与DOM（下）" class="headerlink" title="第二十四部分，JavaScript与DOM（下）"></a>第二十四部分，JavaScript与DOM（下）</h1><pre><code>node节点的2种类型，一种是元素节点，一种是text节点，上一章节已经列出了所有的节点类型，这两种需要我们现在特别注意。创建元素可以通过createElement方法，而创建text节点可以使用createTextNode，相应代码如下：
正如我们上章所说的，DOM和JavaScript语言是2个单独的东西，浏览器事件是DOM API的一部分，而不是JavaScript的一部分。

‘mouseover’ – 鼠标移动到某元素上的时候触发mouseover事件。
 ‘mouseout’ – 鼠标从某元素离开的时候触发mouseout事件。
 ‘mousemove’ – 鼠标在某元素上移动但未离开的时候触发mousemove事件。
 ‘change’ – 控件失去input焦点的时候触发该事件（或者值被改变的时候）。

 ‘load’ – 页面加载完毕（包括内容、图片、frame、object）的时候触发该事件。
 ‘resize’ – 页面大小改变的时候触发该事件（例如浏览器缩放）。
 ‘scroll’ – 页面滚动的时候触发该事件。
 ‘unload’ – 从页面或frame删除所有内容的时候触发该事件（例如离开一个页面）。

 严格来说，有2中不同的模型：W3C模型和微软模型，除IE之外W3C模型支持所有的现代浏览器，而微软模型只支持IE

 使用W3C模型的代码如下：

 // 格式：target.addEventListener( type, function, useCapture );  
 // 例子:  
 var myIntro = document.getElementById(&apos;intro&apos;);
 myIntro.addEventListener(&apos;click&apos;, introClick, false);
 使用IE模型的代码如下：

 // 格式: target.attachEvent ( &apos;on&apos; + type, function );  
 // 例子:  
 var myIntro = document.getElementById(&apos;intro&apos;);
 myIntro.attachEvent(&apos;onclick&apos;, introClick);

 一个非常重要的内容是Event对象，当事件发生的时候出发某个函数，该Event对象将自动在函数内可用，该对象包含了很多事件触发时候的信息，但IE却没有这么实现，而是自己实现的，IE浏览器是通过全局对象window下的event属性来包含这些信息

 例如当你想取消默认的行为的时候你可以使用Event对象里的preventDefault()方法，但IE里不得不使用对象的returnValue属性值来控制


 事件冒泡，就是事件触发的时候通过DOM向上冒泡，首先要知道不是所有的事件都有冒泡。事件在一个目标元素上触发的时候，该事件将触发一一触发祖先节点元素，直到最顶层的元素：
 如图所示，如果a连接被点击，触发触发连接的click事件，然后触发p的click事件，以此再触发div和body的click事件。顺序不变，而且不一定是在同时触发的。
 举例来说，如果你有一个很多行的大表格，在每个&lt;tr&gt;上绑定点击事件是个非常危险的想法，因为性能是个大问题。流行的做法是使用事件委托。事件委托描述的是将事件绑定在容器元素上，然后通过判断点击的target子元素的类型来触发相应的事件。
 事件委托依赖于事件冒泡，如果事件冒泡到table之前被禁用的话，那上面的代码就无法工作了。

 经典的事件处理模型，微软的冒泡，以及网景的捕获模型，w3c的两者兼容，网上例子很多，去看解释
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是tom大叔的JavaScript系列的读书观后感2&quot;&gt;&lt;a href=&quot;#今天要分享的内容是tom大叔的JavaScript系列的读书观后感2&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是tom大叔的JavaScrip
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汤姆大叔的深入理解JavaScript读后感一（1——16节）</title>
    <link href="http://ghohankawk.github.io/2017/06/12/tomdashu/"/>
    <id>http://ghohankawk.github.io/2017/06/12/tomdashu/</id>
    <published>2017-06-12T04:07:39.341Z</published>
    <updated>2017-06-13T03:12:08.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是tom大叔的JavaScript系列的读书观后感"><a href="#今天要分享的内容是tom大叔的JavaScript系列的读书观后感" class="headerlink" title="今天要分享的内容是tom大叔的JavaScript系列的读书观后感"></a>今天要分享的内容是tom大叔的JavaScript系列的读书观后感</h1><h1 id="第一部分，编写高质量JavaScript代码的基本要点"><a href="#第一部分，编写高质量JavaScript代码的基本要点" class="headerlink" title="第一部分，编写高质量JavaScript代码的基本要点"></a>第一部分，编写高质量JavaScript代码的基本要点</h1><p>内容不多，但是作为从头规范开始，值得遵循，现在看来，才更能明白里面的道理。<br>总结一下：</p>
<pre><code>1. 避免全局变量，为啥？自己去看，以及隐式全局变量的副作用，那怎么办？命名空间
2. 推荐单一的单var形式，如  var a = 1,b = 2,myobject = {};形式
3. for循环，预存缓存变量，for-in遍历对象用hasOwnProperty，去掉原型链的属性
4. 避免使用eval，记住该咒语“eval()是魔鬼”，给setInterval(), setTimeout()和Function()构造函数传递字符串，大部分情况下，与使用eval()是类似的，因此要避免                     
5. 编码规范，缩进，空格，花括号，分号
6. 命名函数，啥时候大写，啥时候小写，推荐驼峰命名
7. 关于注解，通常，当你深入研究一个问题，你会很清楚的知道这个代码是干嘛用的，但是，当你一周之后再回来看的时候，想必也要耗掉不少脑细胞去搞明白到底怎么工作的。就是保持注释的及时更新，因为过时的注释比没有注释更加的误导人。
</code></pre><h1 id="第二部分，揭秘命名函数表达式"><a href="#第二部分，揭秘命名函数表达式" class="headerlink" title="第二部分，揭秘命名函数表达式"></a>第二部分，揭秘命名函数表达式</h1><p>总结如下：</p>
<pre><code>1. 什么是申明函数？
2. 什么是表达式函数？
3. 什么是函数语句？
4. 什么是命名函数？
5. 主要是区别的地方，很细微，然后又很多浏览器的怪异行为，坑比较多
6. 还有一种函数表达式不太常见，就是被括号括住的(function foo(){})，他是表达式的原因是因为括号 ()是一个分组操作符，它的内部只能包含表达式
7. 后面的部分，如果第一次看，肯定看不懂，是啥意思，建议先忽略掉
</code></pre><h1 id="第三部分，全面解析Module模式"><a href="#第三部分，全面解析Module模式" class="headerlink" title="第三部分，全面解析Module模式"></a>第三部分，全面解析Module模式</h1><p>总结如下：</p>
<pre><code>1. 正常的module模式，缺点就是，每次都必须new，每个实例都是单独的
</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var Calculator = function (eq) &#123;</div><div class="line">       //这里可以声明私有成员</div><div class="line">   </div><div class="line">       var eqCtl = document.getElementById(eq);</div><div class="line">   </div><div class="line">       return &#123;</div><div class="line">           // 暴露公开的成员</div><div class="line">           add: function (x, y) &#123;</div><div class="line">               var val = x + y;</div><div class="line">               eqCtl.innerHTML = val;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<pre><code>2. 改进过后的，利用函数自执行，可以直接使用
</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var blogModule = (function () &#123;</div><div class="line">    var my = &#123;&#125;, privateName = &quot;博客园&quot;;</div><div class="line"></div><div class="line">    function privateAddTopic(data) &#123;</div><div class="line">        // 这里是内部处理代码</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    my.Name = privateName;</div><div class="line">    my.AddTopic = function (data) &#123;</div><div class="line">        privateAddTopic(data);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    return my;</div><div class="line">&#125; ());</div></pre></td></tr></table></figure>
<pre><code>3. 改進松耦合
</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var blogModule = (function (my) &#123;</div><div class="line"></div><div class="line">    // 添加一些功能   </div><div class="line">    </div><div class="line">    return my;</div><div class="line">&#125; (blogModule || &#123;&#125;));</div></pre></td></tr></table></figure>
<pre><code>4. 克隆
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  var blogModule = (function (old) &#123;</div><div class="line">       var my = &#123;&#125;,</div><div class="line">           key;</div><div class="line">    for (key in old) &#123;</div><div class="line">        if (old.hasOwnProperty(key)) &#123;</div><div class="line">            my[key] = old[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var oldAddPhotoMethod = old.AddPhoto;</div><div class="line">    my.AddPhoto = function () &#123;</div><div class="line">        // 克隆以后，进行了重写，当然也可以继续调用oldAddPhotoMethod</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    return my;</div><div class="line">&#125; (blogModule));</div></pre></td></tr></table></figure>
<pre><code>5. 子模块
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">blogModule.CommentSubModule = (function () &#123;</div><div class="line">    var my = &#123;&#125;;</div><div class="line">    // ...</div><div class="line"></div><div class="line">    return my;</div><div class="line">&#125; ());</div></pre></td></tr></table></figure>
<h1 id="第四部分，立即调用的函数表达式"><a href="#第四部分，立即调用的函数表达式" class="headerlink" title="第四部分，立即调用的函数表达式"></a>第四部分，立即调用的函数表达式</h1><pre><code>1. 自動執行
(function () { /* code */ } ()); // 推荐使用这个
2. (function () { /* code */ })(); // 但是这个也是可以用的，括號
3.在一个表达式后面加上括号()，该表达式会立即执行，但是在一个语句后面加上括号()，是完全不一样的意思，他的只是分组操作符。
4. 闭包的经典例子
</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">   错误的：</div><div class="line">   var elems = document.getElementsByTagName(&apos;a&apos;);</div><div class="line">   </div><div class="line">   for (var i = 0; i &lt; elems.length; i++) &#123;</div><div class="line">   </div><div class="line">       elems[i].addEventListener(&apos;click&apos;, function (e) &#123;</div><div class="line">           e.preventDefault();</div><div class="line">           alert(&apos;I am link #&apos; + i);</div><div class="line">       &#125;, &apos;false&apos;);</div><div class="line">   </div><div class="line">   &#125;</div><div class="line">正确的：会锁住对应的index的值，虽然i最后为10，但是之前的值，已经记录好了</div><div class="line">var elems = document.getElementsByTagName(&apos;a&apos;);</div><div class="line"></div><div class="line">for (var i = 0; i &lt; elems.length; i++) &#123;</div><div class="line"></div><div class="line">    (function (lockedInIndex) &#123;</div><div class="line"></div><div class="line">        elems[i].addEventListener(&apos;click&apos;, function (e) &#123;</div><div class="line">            e.preventDefault();</div><div class="line">            alert(&apos;I am link #&apos; + lockedInIndex);</div><div class="line">        &#125;, &apos;false&apos;);</div><div class="line"></div><div class="line">    &#125;)(i);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">   ``` </div><div class="line">       5. 不管什么是自执行，还是立即调用，不用分那么清楚，只需知道立即执行一次匿名函数就够了</div><div class="line">       </div><div class="line"># 第五部分，强大的原型和原型链</div><div class="line"></div><div class="line">    1. 原型关键词，prototype</div><div class="line">    2. 说白了，原型就是一个对象</div><div class="line">    3. 通过hasOwnProperty，区分属性从哪里来的</div><div class="line">    4. 默认还有一个原型的链条，一直到Object.prototype为止</div><div class="line">    5. 所有的对象都有&quot;[[prototype]]&quot;属性（通过__proto__访问），该属性对应对象的原型</div><div class="line">    6. 所有的函数对象都有&quot;prototype&quot;属性，该属性的值会被赋值给该函数创建的对象的&quot;__proto__&quot;属性</div><div class="line">    7. 所有的原型对象都有&quot;constructor&quot;属性，该属性对应创建所有指向该原型的实例的构造函数</div><div class="line">    8. 函数对象和原型对象通过&quot;prototype&quot;和&quot;constructor&quot;属性进行相互关联</div><div class="line">    9. 最简单易懂的看下边</div><div class="line">   [原型链介绍](https://www.talkingcoder.com/article/6360227501704156372)</div><div class="line"></div><div class="line"># 第六七八部分，S.O.L.I.D五大原则之单一职责SRP（忽略）</div><div class="line"></div><div class="line">    The Single Responsibility Principle（单一职责SRP）</div><div class="line">    The Open/Closed Principle（开闭原则OCP）</div><div class="line">    The Liskov Substitution Principle（里氏替换原则LSP）</div><div class="line">    The Interface Segregation Principle（接口分离原则ISP）</div><div class="line">    The Dependency Inversion Principle（依赖反转原则DIP）</div><div class="line"># 第九部分，根本没有“JSON对象”这回事！</div><div class="line"></div><div class="line">    简单的说</div><div class="line">    1. // 这是JSON字符串</div><div class="line">       var foo = &apos;&#123; &quot;prop&quot;: &quot;val&quot; &#125;&apos;;</div><div class="line">    2. // 这是对象字面量</div><div class="line">       var bar = &#123; &quot;prop&quot;: &quot;val&quot; &#125;;</div><div class="line">    3. // 将字符串反序列化成json对象</div><div class="line">       var my_obj = JSON.parse( foo );</div><div class="line">    4. json对象，和字面量对象，明显的区别，前者必须有引号，后者去掉引号可以</div><div class="line">           var bar = &#123; prop: &quot;val&quot; &#125;;合法的</div><div class="line">    </div><div class="line"># 第十部分，JavaScript核心（晋级高手必读篇）</div><div class="line">    1. 执行上下文栈(Execution Context Stack)，有三种类型：global, function和eval。</div><div class="line">    2. 执行上下文(Execution Context)，变量对象(variable object)，this指针(this value)，作用域链(scope chain)</div><div class="line">    函数表达式[function expression]（而不是函数声明[function declarations，区别请参考本系列第2章]）是不包含在VO[variable object]里面的</div><div class="line">    3. 变量对象(variable object) 是与执行上下文相关的 数据作用域(scope of data) 。</div><div class="line">       它是与上下文关联的特殊对象，用于存储被定义在上下文中的 变量(variables) 和 函数声明(function declarations) 。</div><div class="line">    4. 当函数被调用者激活，这个特殊的活动对象(activation object) 就被创建了</div><div class="line">    5. 作用域链的原理和原型链很类似，如果这个变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。</div><div class="line">    6. 这表示，在我们去搜寻__parent__之前，首先会去__proto__的链接中。</div><div class="line">    7. 闭包是一系列代码块（在ECMAScript中是函数），并且静态保存所有父级的作用域。通过这些保存的作用域来搜寻到函数中的自由变量。</div><div class="line">    8. 在ECMAScript中，是不可以给this赋值的，因为，还是那句话，this不是变量。</div><div class="line">    9. this是执行上下文环境的一个属性，而不是某个变量对象的属性</div><div class="line"># 第十一部分，执行上下文（Execution Contexts）</div><div class="line">可以把调用上下文作为第二个参数传递给eval。那么，如果这个上下文存在，就有可能影响“私有”(有人喜欢这样叫它)变量。</div><div class="line"># 第十二部分，变量对象（Variable Object）</div><div class="line">```angularjs</div><div class="line">    if (true) &#123;</div><div class="line">        var a = 1;</div><div class="line">        &#125; else &#123;</div><div class="line">        var b = 2;</div><div class="line">        &#125;</div><div class="line">    alert(a); // 1</div><div class="line">    alert(b); // undefined,不是b没有声明，而是b的值是undefined</div></pre></td></tr></table></figure>
<p>变量相对于简单属性来说，变量有一个特性(attribute)：{DontDelete},这个特性的含义就是不能用delete操作符直接删除变量属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = 10;</div><div class="line">alert(window.a); // 10</div><div class="line"> </div><div class="line">alert(delete a); // true</div><div class="line"> </div><div class="line">alert(window.a); // undefined</div><div class="line"> </div><div class="line">var b = 20;</div><div class="line">alert(window.b); // 20</div><div class="line"> </div><div class="line">alert(delete b); // false</div><div class="line"> </div><div class="line">alert(window.b); // still 20</div></pre></td></tr></table></figure></p>
<p>但是这个规则在有个上下文里不起走样，那就是eval上下文，变量没有{DontDelete}特性。</p>
<h1 id="第十三部分，This-Yes-this"><a href="#第十三部分，This-Yes-this" class="headerlink" title="第十三部分，This? Yes,this!"></a>第十三部分，This? Yes,this!</h1><pre><code>1，一个函数上下文中确定this值的通用规则如下：
2. 在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用括号()的左边是引用类型的值，this将设为引用类型值的base对象（base object），在其他情况下（与引用类型不同的任何其它属性），这个值为null。不过，实际不存在this的值为null的情况，因为当this的值为null的时候，其值会被隐式转换为全局对象。
3. 我们可以很明确的告诉你，为什么用表达式的不同形式激活同一个函数会不同的this值，答案在于引用类型（type Reference）不同的中间值。
4. 标识符是变量名，函数名，函数参数名和全局对象中未识别的属性名
5. (function () {
     alert(this); // null =&gt; global
   })();
6. 函数调用中手动设置this，apply,call
7. 作为构造器调用的函数中的this,都将this的值设置为新创建的对象。
8. 引用类型和this为null,默认为golbal
</code></pre><h1 id="第十四部分，作用域链-Scope-Chain"><a href="#第十四部分，作用域链-Scope-Chain" class="headerlink" title="第十四部分，作用域链(Scope Chain)"></a>第十四部分，作用域链(Scope Chain)</h1><pre><code>1. 函数上下文的作用域链在函数调用时创建的，包含活动对象和这个函数内部的[[scope]]属性。
2. 注意这重要的一点－－[[scope]]在函数创建时被存储－－静态（不变的），永远永远，直至函数销毁 
3. 闭包理解
var x = 10;

function foo() {
  alert(x);
}

(function () {
  var x = 20;
  foo(); // 10, but not 20
})();
[[Scope]]包括在函数内创建的词法作用域（父变量对象）。当函数进一步激活时，在变量对象的这个词法链（静态的存储于创建时）中，来自较高作用域的变量将被搜寻。
此外，这个例子也清晰的表明，一个函数（这个例子中为从函数“foo”返回的匿名函数）的[[scope]]持续存在，即使是在函数创建的作用域已经完成之后。
4. 通过函构造函数创建的函数的[[scope]]属性总是唯一的全局对象
5. 源于ECMAScript 的原型特性。如果一个属性在对象中没有直接找到，查询将在原型链中继续。即常说的二维链查找。（1）作用域链环节；（2）每个作用域链－－深入到原型链环节
6. 全局和eval上下文中的作用域链,全局上下文的作用域链仅包含全局对象
7. 在代码执行阶段有两个声明能修改作用域链。这就是with声明和catch语句。它们添加到作用域链的最前端，对象须在这些声明中出现的标识符中查找。
</code></pre><h1 id="第十五部分，函数（Functions）"><a href="#第十五部分，函数（Functions）" class="headerlink" title="第十五部分，函数（Functions）"></a>第十五部分，函数（Functions）</h1><pre><code>1。 只有这2个位置可以声明函数，也就是说:不可能在表达式位置或一个代码块中定义它。
2. // 函数可以在如下地方声明：
   // 1) 直接在全局上下文中
   function globalFD() {
     // 2) 或者在一个函数的函数体内
     function innerFD() {}
   }
3. 相当一部分问题出现了，我们为什么需要函数表达式？答案很明显——在表达式中使用它们，”不会污染”变量对象。最简单的例子是将一个函数作为参数传递给其它函数。
4. 这种模式中，初始化的FE的名称通常被忽略：
(function () {
   // 初始化作用域 
})();
5. ”为何在函数创建后的立即调用中必须用圆括号来包围它？”，答案就是：表达式句子的限制就是这样的。
6. function () {
     ...
   }();

   // 即便有名称

   function foo() {
     ...
   }();
如果在全局代码里定义（也就是程序级别），解释器会将它看做是函数声明，因为他是以function关键字开头，第一个例子，我们会得到SyntaxError错误，是因为函数声明没有名字（我们前面提到了函数声明必须有名字）。

第二个例子，我们有一个名称为foo的一个函数声明正常创建，但是我们依然得到了一个语法错误——没有任何表达式的分组操作符错误。在函数声明后面他确实是一个分组操作符，而不是一个函数调用所使用的圆括号。
</code></pre><h1 id="第十六部分，闭包（Closures）"><a href="#第十六部分，闭包（Closures）" class="headerlink" title="第十六部分，闭包（Closures）"></a>第十六部分，闭包（Closures）</h1><pre><code>var z = 10;

function foo() {
  alert(z);
}

foo(); // 10 – 使用静态和动态作用域的时候

(function () {

  var z = 20;
  foo(); // 10 – 使用静态作用域, 20 – 使用动态作用域

})();

// 将foo作为参数的时候是一样的
(function (funArg) {

  var z = 30;
  funArg(); // 10 – 静态作用域, 30 – 动态作用域

})(foo);
上述描述的就是两类funarg问题 —— 取决于是否将函数以返回值返回（第一类问题）以及是否将函数当函数参数使用（第二类问题）。

为了解决上述问题，就引入了 闭包的概念。

这里说明一下，开发人员经常错误将闭包简化理解成从父上下文中返回内部函数，甚至理解成只有匿名函数才能是闭包。

再说一下，因为作用域链，使得所有的函数都是闭包（与函数类型无关： 匿名函数，FE，NFE，FD都是闭包）。
ECMAScript中，闭包指的是：

从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。
从实践角度：以下函数才算是闭包：
即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）
在代码中引用了自由变量

顺便提下，函数对象的 apply 和 call方法，在函数式编程中也可以用作应用函数。 apply和call已经在讨论“this”的时候介绍过了；这里，我们将它们看作是应用函数 —— 应用到参数中的函数（在apply中是参数列表，在call中是独立的参数）：

闭包还有另外一个非常重要的应用 —— 延迟调用：

var a = 10;
setTimeout(function () {
  alert(a); // 10, after one second
}, 1000);

还可以创建封装的作用域来隐藏辅助对象：

var foo = {};

// 初始化
(function (object) {

  var x = 10;

  object.getX = function _getX() {
    return x;
  };

})(foo);

alert(foo.getX()); // 获得闭包 &quot;x&quot; – 10
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是tom大叔的JavaScript系列的读书观后感&quot;&gt;&lt;a href=&quot;#今天要分享的内容是tom大叔的JavaScript系列的读书观后感&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是tom大叔的JavaScript系
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>adSense试试看</title>
    <link href="http://ghohankawk.github.io/2017/06/09/adSense/"/>
    <id>http://ghohankawk.github.io/2017/06/09/adSense/</id>
    <published>2017-06-09T04:13:09.827Z</published>
    <updated>2017-06-09T04:18:04.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是adSense"><a href="#今天要分享的内容是adSense" class="headerlink" title="今天要分享的内容是adSense"></a>今天要分享的内容是adSense</h1><h1 id="最近老大让弄广告"><a href="#最近老大让弄广告" class="headerlink" title="最近老大让弄广告"></a>最近老大让弄广告</h1><p>既然自己都在做这个东西，何不在自己的网站里面引进一下，试试看，效果如何</p>
<h1 id="后续再加统计"><a href="#后续再加统计" class="headerlink" title="后续再加统计"></a>后续再加统计</h1><p>暂时留个坑</p>
<h1 id="高考终于结束了，老弟也解放了，-｡･∀･-ﾉﾞ嗨的和同学聚会去了"><a href="#高考终于结束了，老弟也解放了，-｡･∀･-ﾉﾞ嗨的和同学聚会去了" class="headerlink" title="高考终于结束了，老弟也解放了，(｡･∀･)ﾉﾞ嗨的和同学聚会去了"></a>高考终于结束了，老弟也解放了，(｡･∀･)ﾉﾞ嗨的和同学聚会去了</h1><h1 id="晚上又能回家了，离得近，就是这点方便"><a href="#晚上又能回家了，离得近，就是这点方便" class="headerlink" title="晚上又能回家了，离得近，就是这点方便"></a>晚上又能回家了，离得近，就是这点方便</h1><p>为天下的学子庆祝一下，一图胜前言<br><img src="http://img1.gtimg.com/gamezone/pics/hv1/56/203/1857/120803246.jpg" alt=""></p>
<h1 id="恭喜表哥要订婚了"><a href="#恭喜表哥要订婚了" class="headerlink" title="恭喜表哥要订婚了"></a>恭喜表哥要订婚了</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是adSense&quot;&gt;&lt;a href=&quot;#今天要分享的内容是adSense&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是adSense&quot;&gt;&lt;/a&gt;今天要分享的内容是adSense&lt;/h1&gt;&lt;h1 id=&quot;最近老大让弄广告&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写在高考前，对弟弟的祝福</title>
    <link href="http://ghohankawk.github.io/2017/06/06/before-gaokao/"/>
    <id>http://ghohankawk.github.io/2017/06/06/before-gaokao/</id>
    <published>2017-06-06T11:49:16.524Z</published>
    <updated>2017-06-06T12:04:47.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随便写点"><a href="#随便写点" class="headerlink" title="随便写点"></a>随便写点</h1><p>记得十年前，这个时候，已经进入了考场，转眼，十年都过去了</p>
<h1 id="有首歌叫十年"><a href="#有首歌叫十年" class="headerlink" title="有首歌叫十年"></a>有首歌叫十年</h1><p>确实，十年之前，你不认识我，我不认识你</p>
<h1 id="每个人都需要经历这个坎"><a href="#每个人都需要经历这个坎" class="headerlink" title="每个人都需要经历这个坎"></a>每个人都需要经历这个坎</h1><p>谁都替代不了，可能有些人比较顺利的迈过去了，而有些人很难</p>
<p>这个事情，说重要，它确认重要，足以改变人的一生命运</p>
<p>不重要，也不过是一场考试而已，在人生的旅途中，只是一个章节而已</p>
<h1 id="我只想说，"><a href="#我只想说，" class="headerlink" title="我只想说，"></a>我只想说，</h1><p>认真对待，在正确的年龄做正确的事情，就足矣了</p>
<p>不过结果如何，你老爸老妈，都在等你回家吃饭</p>
<p>老哥，也祝福你，十年寒窗，加油，上图吧</p>
<p><script src="https://source.pixiv.net/source/embed.js" data-id="63198678_d0361387025dac92a6181c21104178c2" data-size="large" data-border="on" charset="utf-8"></script><noscript><p><a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63198678" target="_blank">米娜桑~高考加油！  (<em>ﾟ▽ﾟ</em>)</a> by <a href="https://www.pixiv.net/member.php?id=14531483" target="_blank">KoinKoni</a> on <a href="https://www.pixiv.net/" target="_blank">pixiv</a></p></noscript></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随便写点&quot;&gt;&lt;a href=&quot;#随便写点&quot; class=&quot;headerlink&quot; title=&quot;随便写点&quot;&gt;&lt;/a&gt;随便写点&lt;/h1&gt;&lt;p&gt;记得十年前，这个时候，已经进入了考场，转眼，十年都过去了&lt;/p&gt;
&lt;h1 id=&quot;有首歌叫十年&quot;&gt;&lt;a href=&quot;#有首歌
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于log4j的使用说明</title>
    <link href="http://ghohankawk.github.io/2017/06/06/log4j/"/>
    <id>http://ghohankawk.github.io/2017/06/06/log4j/</id>
    <published>2017-06-06T10:58:35.396Z</published>
    <updated>2017-06-06T11:40:08.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是log4j的使用。"><a href="#今天要分享的内容是log4j的使用。" class="headerlink" title="今天要分享的内容是log4j的使用。"></a>今天要分享的内容是log4j的使用。</h1><p>每个系统都有日志记录，而多数都是用的log4j，以为会配置了，懂了，发现还是有些细节的问题，要问，说不上来</p>
<h1 id="先来直接看配置吧和测试用例吧"><a href="#先来直接看配置吧和测试用例吧" class="headerlink" title="先来直接看配置吧和测试用例吧"></a>先来直接看配置吧和测试用例吧</h1><p>jar包的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- log4j support --&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.2.17&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>log4j.properties文件如下，放在你的web的resource下面，推荐maven标准工程来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">### 设置###</div><div class="line">log4j.rootLogger = DEBUG,stdout,D,E</div><div class="line"></div><div class="line">log4j.logger.A=DEBUG, stdout</div><div class="line">log4j.logger.A.B=INFO, stdout  </div><div class="line"></div><div class="line">### 输出信息到控制抬 ###</div><div class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target = System.out</div><div class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</div><div class="line"></div><div class="line">### 输出DEBUG 级别以上的日志到=D://logs/error.log ###</div><div class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.D.File = D://logs/log.log</div><div class="line">log4j.appender.D.Append = true</div><div class="line">log4j.appender.D.Threshold = DEBUG</div><div class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</div><div class="line"></div><div class="line">### 输出ERROR 级别以上的日志到=D://logs/error.log ###</div><div class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.E.File =D://logs/error.log</div><div class="line">log4j.appender.E.Append = true</div><div class="line">log4j.appender.E.Threshold = ERROR</div><div class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</div></pre></td></tr></table></figure></p>
<p>测试用例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import org.apache.log4j.Logger;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author hankun</div><div class="line"> * @create 2017-06-06 18:32</div><div class="line"> */</div><div class="line">public class log4jTtest &#123;</div><div class="line">    private static Logger logger = Logger.getLogger(log4jTtest.class);</div><div class="line">    private static Logger loggerA = Logger.getLogger(&quot;A&quot;);</div><div class="line">    private static Logger loggerA_B = Logger.getLogger(&quot;A.B&quot;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param args</div><div class="line">     */</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        // 记录debug级别的信息</div><div class="line">        logger.debug(&quot;This is debug message.&quot;);</div><div class="line">        // 记录info级别的信息</div><div class="line">        logger.info(&quot;This is info message.&quot;);</div><div class="line">        // 记录error级别的信息</div><div class="line">        logger.error(&quot;This is error message.&quot;);</div><div class="line"></div><div class="line">        loggerA_B.info(&quot;repeat three times in console&quot;);</div><div class="line">        loggerA.info(&quot;repeat two times in console&quot;);</div><div class="line">        logger.info(&quot;repeat one times in console&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="注意上面的输出结果，你知道输出啥内容，则，就真正理解了"><a href="#注意上面的输出结果，你知道输出啥内容，则，就真正理解了" class="headerlink" title="注意上面的输出结果，你知道输出啥内容，则，就真正理解了"></a>注意上面的输出结果，你知道输出啥内容，则，就真正理解了</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[DEBUG] 2017-06-06 19:05:03,477 method:log4jTtest.main(log4jTtest.java:18)</div><div class="line">This is debug message.</div><div class="line">[INFO ] 2017-06-06 19:05:03,479 method:log4jTtest.main(log4jTtest.java:20)</div><div class="line">This is info message.</div><div class="line">[ERROR] 2017-06-06 19:05:03,479 method:log4jTtest.main(log4jTtest.java:22)</div><div class="line">This is error message.</div><div class="line">[INFO ] 2017-06-06 19:05:03,479 method:log4jTtest.main(log4jTtest.java:24)</div><div class="line">repeat three times in console</div><div class="line">[INFO ] 2017-06-06 19:05:03,479 method:log4jTtest.main(log4jTtest.java:24)</div><div class="line">repeat three times in console</div><div class="line">[INFO ] 2017-06-06 19:05:03,479 method:log4jTtest.main(log4jTtest.java:24)</div><div class="line">repeat three times in console</div><div class="line">[INFO ] 2017-06-06 19:05:03,480 method:log4jTtest.main(log4jTtest.java:25)</div><div class="line">repeat two times in console</div><div class="line">[INFO ] 2017-06-06 19:05:03,480 method:log4jTtest.main(log4jTtest.java:25)</div><div class="line">repeat two times in console</div><div class="line">[INFO ] 2017-06-06 19:05:03,480 method:log4jTtest.main(log4jTtest.java:26)</div><div class="line">repeat one times in console</div></pre></td></tr></table></figure>
<h1 id="问题如下"><a href="#问题如下" class="headerlink" title="问题如下"></a>问题如下</h1><ol>
<li>前面的三个输出，不用解释，都明白为啥</li>
<li>为啥那个loggerA_B，输出了三次，而loggerA输出了二次，logger输出了一次？</li>
</ol>
<h1 id="log4j几个重要的概念"><a href="#log4j几个重要的概念" class="headerlink" title="log4j几个重要的概念"></a>log4j几个重要的概念</h1><ul>
<li>logger组件<ol>
<li>简单的说，它就是决定了应用程序中，哪些代码哪些地方，有可能输出日志</li>
<li>这也就是为什么，每个类里面上来，就是，logger的初始化，它决定了这个类有资格输出日志</li>
<li>首先Log4J中总是存在一个rootLogger，即使没有显示配置也是存在的，并且默认输出级别为DEBUG。</li>
<li>Log4J中的层次是用’.’来分隔的，如log4j.logger.com.example.test，这里并不是说log4j.logger后面一定是具体的包名乃至类名，</li>
</ol>
</li>
<li>appender组件<ol>
<li>输出地，也就是你的日志想输出到哪里，把上面的logger里面的日志</li>
<li>再简单点，就是输出到控制台和文件里面，也就是上面的配置stdout和D和E</li>
<li>这个需要和下面的这个概念配合</li>
</ol>
</li>
<li>输出控制的概念<ol>
<li>Log4j默认把日志信息分为五个等级  all&lt;debug &lt; info &lt; warn &lt; error &lt; fatal&lt;off</li>
<li>只有大于设置的级别，才会打印日志，低于则忽略</li>
<li>log4j.appender.threshold=ERROR，这种配置用于控制，一个appender的输出级别</li>
</ol>
</li>
<li>继承的概念<ol>
<li>log4j.rootLogger=DEBUG, Console</li>
<li>log4j.logger.A=DEBUG, Console</li>
<li>log4j.logger.A.B=INFO, Console</li>
<li>A.B继承A，再继承最顶级的root</li>
<li>Log4j是根据Log的名字来判断继承关系的</li>
</ol>
</li>
</ul>
<h1 id="来解释一下，上面的输出结果"><a href="#来解释一下，上面的输出结果" class="headerlink" title="来解释一下，上面的输出结果"></a>来解释一下，上面的输出结果</h1><ol>
<li>首先是，debug，info和error前三个日志输出，它们的logger是log4jTtest.class初始化的，继承根logger，因此就是debug级别，同时因为还有D和E的两个appender，所以你在d盘可以看到，有一个info的文件还有一个error的文件，这个日志输出没问题</li>
<li>然后就是解释那重复的三个，因为loggerA_B，它是根据A.B这个参数初始化的，是有继承的，满足A.B的info级别的日志输出，必然满足A的logger的日志输出，当然还有默认的根输出，因此三次</li>
<li>而那个两次的，它的logger是loggerA，继承于根，因此，info的时候，它本身输出一次，根也输出一次，就是两次了。</li>
<li>最后一个，用的是默认的根，当然，只能输出一次了</li>
</ol>
<h1 id="问题来了，怎么避免重复，因为继承父的logger？"><a href="#问题来了，怎么避免重复，因为继承父的logger？" class="headerlink" title="问题来了，怎么避免重复，因为继承父的logger？"></a>问题来了，怎么避免重复，因为继承父的logger？</h1><pre><code>log4j.additivity.A.B=false
logger A.B的日志仅会输出到自己Console中，不会继承任何父logger的appender。
</code></pre><p> 就加上面的这句，就解决了问题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前反反复复看了很多次，关于日志log4j的配置，每次看完以为会了，但是到了项目里面，总是不知道，自己有时候打印的日志到底跑哪里去了，或者去哪里看？<br>总结其原因就是，对于细节没有掌握理解到位，比如就是这个logger的概念，如果你真正的明白了，就知道了</p>
<p>谁能产生日志？logger</p>
<p>日志放哪里？appender</p>
<p>什么级别的日志才会输出？日志级别</p>
<p>他们是相互独立的组件，单独配置，又是相互配合，一起使用的，n*m的这种概念</p>
<p>因此上面的配置文件，一个logger可以对应多个appender，而appender之间又是彼此独立的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是log4j的使用。&quot;&gt;&lt;a href=&quot;#今天要分享的内容是log4j的使用。&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是log4j的使用。&quot;&gt;&lt;/a&gt;今天要分享的内容是log4j的使用。&lt;/h1&gt;&lt;p&gt;每个系统都有
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>六一儿童节快乐（补）</title>
    <link href="http://ghohankawk.github.io/2017/06/02/liuyi/"/>
    <id>http://ghohankawk.github.io/2017/06/02/liuyi/</id>
    <published>2017-06-02T09:45:21.639Z</published>
    <updated>2017-06-02T09:47:39.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="昨天这么重要的节日忘记了"><a href="#昨天这么重要的节日忘记了" class="headerlink" title="昨天这么重要的节日忘记了"></a>昨天这么重要的节日忘记了</h1><p>今天专程来补图，喵帕斯~<br>祝天下所有的大小朋友，儿童节快乐~<br><img src="http://img.ngacn.cc/attachments/mon_201706/01/-9lddQ13m-9na1KxT1kSgl-d8.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;昨天这么重要的节日忘记了&quot;&gt;&lt;a href=&quot;#昨天这么重要的节日忘记了&quot; class=&quot;headerlink&quot; title=&quot;昨天这么重要的节日忘记了&quot;&gt;&lt;/a&gt;昨天这么重要的节日忘记了&lt;/h1&gt;&lt;p&gt;今天专程来补图，喵帕斯~&lt;br&gt;祝天下所有的大小朋友，儿童节
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java中的pattern和matcher的用法</title>
    <link href="http://ghohankawk.github.io/2017/06/02/java-match/"/>
    <id>http://ghohankawk.github.io/2017/06/02/java-match/</id>
    <published>2017-06-02T08:53:23.377Z</published>
    <updated>2017-06-02T09:24:24.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是java语言中的pattern和matcher的用法"><a href="#今天要分享的内容是java语言中的pattern和matcher的用法" class="headerlink" title="今天要分享的内容是java语言中的pattern和matcher的用法"></a>今天要分享的内容是java语言中的pattern和matcher的用法</h1><p>java.util.regex是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。<br>它包括两个类：Pattern和Matcher Pattern 一个Pattern是一个正则表达式经编译后的表现模式。<br>Matcher 一个Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。<br>首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，<br>然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。</p>
<h1 id="先理解捕获组的概念"><a href="#先理解捕获组的概念" class="headerlink" title="先理解捕获组的概念"></a>先理解捕获组的概念</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">捕获组可以通过从左到右计算其开括号来编号，编号是从1 开始的。</div><div class="line">例如，在表达式 ((A)(B(C)))中，存在四个这样的组：</div><div class="line">1        ((A)(B(C)))</div><div class="line">2        (A)</div><div class="line">3        (B(C))</div><div class="line">4        (C)</div><div class="line"></div><div class="line">组0始终代表整个表达式。</div></pre></td></tr></table></figure>
<h1 id="详解Pattern类"><a href="#详解Pattern类" class="headerlink" title="详解Pattern类"></a>详解Pattern类</h1><pre><code>Pattern类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过Pattern.complie(String regex)简单工厂方法创建一个正则表达式, 
Java代码示例: 
Pattern p=Pattern.compile(&quot;\\w+&quot;); 
p.pattern();//返回 \w+ 
</code></pre><h1 id="详解Matcher类"><a href="#详解Matcher类" class="headerlink" title="详解Matcher类"></a>详解Matcher类</h1><pre><code>说了这么多,终于轮到Matcher类登场了,Pattern.matcher(CharSequence input)返回一个Matcher对象.
Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例. 
Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持. 
Java代码示例: 

Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;22bb23&quot;); 
m.pattern();//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的 
</code></pre><h1 id="注意看下面这个例子，pattern方法返回的值"><a href="#注意看下面这个例子，pattern方法返回的值" class="headerlink" title="注意看下面这个例子，pattern方法返回的值"></a>注意看下面这个例子，pattern方法返回的值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import java.util.regex.Matcher;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">public class StringPattern &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Pattern p = Pattern.compile(&quot;\\d+&quot;);</div><div class="line">        Matcher m = p.matcher(&quot;22bb23&quot;);</div><div class="line">        Pattern pattern = m.pattern();//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的</div><div class="line">        String pattern1 = pattern.pattern();</div><div class="line">        System.out.println(pattern1);//\d+</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Matcher-matches-Matcher-lookingAt-Matcher-find-区别"><a href="#Matcher-matches-Matcher-lookingAt-Matcher-find-区别" class="headerlink" title="Matcher.matches()/ Matcher.lookingAt()/ Matcher.find()区别"></a>Matcher.matches()/ Matcher.lookingAt()/ Matcher.find()区别</h1><ol>
<li>Matcher类提供三个匹配操作方法,三个方法均返回boolean类型,当匹配到时返回true,没匹配到则返回false<br>matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true </li>
<li>lookingAt()对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回true </li>
<li>find()对字符串进行匹配,匹配到的字符串可以在任何位置. </li>
</ol>
<h1 id="Mathcer-start-Matcher-end-Matcher-group"><a href="#Mathcer-start-Matcher-end-Matcher-group" class="headerlink" title="Mathcer.start()/ Matcher.end()/ Matcher.group()"></a>Mathcer.start()/ Matcher.end()/ Matcher.group()</h1><ol>
<li>当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息. </li>
<li>start()返回匹配到的子字符串在字符串中的索引位置. </li>
<li>end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置. </li>
<li>group()返回匹配到的子字符串 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import java.util.regex.Matcher;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">public class StringPattern &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Pattern p=Pattern.compile(&quot;([a-z]+)(\\d+)&quot;);</div><div class="line">        Matcher m=p.matcher(&quot;aaa2223bb&quot;);</div><div class="line">        System.out.println(m.find());   //匹配aaa2223</div><div class="line"></div><div class="line">        System.out.println(m.groupCount());  //返回2,因为有2组</div><div class="line">        System.out.println(m.start(1));   //返回0 返回第一组匹配到的子字符串在字符串中的索引号</div><div class="line">        System.out.println(m.start(2));   //返回3</div><div class="line">        System.out.println(m.end(1));   //返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置.</div><div class="line">        System.out.println(m.end(2));   //返回7</div><div class="line">        System.out.println(m.group(1));   //返回aaa,返回第一组匹配到的子字符串</div><div class="line">        System.out.println(m.group(2));;   //返回2223,返回第二组匹配到的子字符串</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="find比较特殊，特此说明"><a href="#find比较特殊，特此说明" class="headerlink" title="find比较特殊，特此说明"></a>find比较特殊，特此说明</h1><p>find</p>
<ol>
<li>public boolean find()尝试查找与该模式匹配的输入序列的下一个子序列。<br>此方法从匹配器区域的开头开始，如果该方法的前一次调用成功了并且从那时开始匹配器没有被重置，则从以前匹配操作没有匹配的第一个字符开始。<br>如果匹配成功，则可以通过 start、end 和 group 方法获取更多信息。  </li>
<li>返回：<br>当且仅当输入序列的子序列匹配此匹配器的模式时才返回 true。</li>
</ol>
<p>因此有下面这种，循环find的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import java.util.regex.Matcher;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">public class StringPattern &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Pattern p=Pattern.compile(&quot;\\d+&quot;);</div><div class="line">        Matcher m=p.matcher(&quot;我的QQ是:123 我的电话是:456 我的邮箱是:789@aaa.com&quot;);</div><div class="line">        while(m.find()) &#123;</div><div class="line">            System.out.println(m.group());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="最后强调"><a href="#最后强调" class="headerlink" title="最后强调"></a>最后强调</h1><p>现在大家应该知道,每次执行匹配操作后start(),end(),group()三个方法的值都会改变,改变成匹配到的子字符串的信息,以及它们的重载方法,也会改变成相应的信息.<br>注意:只有当匹配操作成功,才可以使用start(),end(),group()三个方法,否则会抛出java.lang.IllegalStateException,也就是当matches(),lookingAt(),find()其中任意一个方法返回true时,才可以使用.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是java语言中的pattern和matcher的用法&quot;&gt;&lt;a href=&quot;#今天要分享的内容是java语言中的pattern和matcher的用法&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是java语言中的patte
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java中的replace和replaceAll的区别</title>
    <link href="http://ghohankawk.github.io/2017/06/02/java-replace/"/>
    <id>http://ghohankawk.github.io/2017/06/02/java-replace/</id>
    <published>2017-06-02T07:59:53.019Z</published>
    <updated>2017-06-02T08:11:00.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是java语言中的replace的用法"><a href="#今天要分享的内容是java语言中的replace的用法" class="headerlink" title="今天要分享的内容是java语言中的replace的用法"></a>今天要分享的内容是java语言中的replace的用法</h1><h1 id="测试用例如下"><a href="#测试用例如下" class="headerlink" title="测试用例如下"></a>测试用例如下</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class StringReplaceTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        String src = new String("aabbccdd333ee");</div><div class="line">        System.out.println(src.replace("3", "f"));</div><div class="line">        System.out.println(src.replace('3', 'f'));</div><div class="line">        System.out.println(src.replaceAll("\\d", "ff"));</div><div class="line">        System.out.println(src.replaceAll("a", "f"));</div><div class="line">        System.out.println(src.replaceFirst("\\d", "ff"));</div><div class="line">        System.out.println(src.replaceFirst("4", "ff"));</div><div class="line">        System.out.println("\\");</div><div class="line">        System.out.println("\\\\");</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><ol>
<li>aabbccddfffee</li>
<li>aabbccddffffffee</li>
<li>ffbbccdd333ee</li>
<li>aabbccddff33ee</li>
<li>aabbccdd333ee</li>
<li>\</li>
<li>\\</li>
</ol>
<h1 id="解释如下"><a href="#解释如下" class="headerlink" title="解释如下"></a>解释如下</h1><ul>
<li>replace的参数是char和CharSequence,即可以支持字符的替换,也支持字符串的替换(CharSequence即字符串序列的意思,说白了也就是字符串); </li>
<li>replaceAll的参数是regex,即基于规则表达式的替换,比如,可以通过replaceAll(“\d”, “*”)把一个字符串所有的数字字符都换成星号; </li>
</ul>
<p><pre><br>相同点是都是全部替换,即把源字符串中的某一字符或字符串全部换成指定的字符或字符串,如果只想替换第一次出现的,可以使用 replaceFirst(),这个方法也是基于规则表达式的替换,但与replaceAll()不同的是,只替换第一次出现的字符串;<br>另外,如果replaceAll()和replaceFirst()所用的参数据不是基于规则表达式的,则与replace()替换字符串的效果是一样的,即这两者也支持字符串的操作;<br>还有一点注意:执行了替换操作后,源字符串的内容是没有发生改变的<br></pre></p>
<h1 id="最后讲一个关于斜杠的问题"><a href="#最后讲一个关于斜杠的问题" class="headerlink" title="最后讲一个关于斜杠的问题"></a>最后讲一个关于斜杠的问题</h1><pre><code>&apos;\&apos;在java中是一个转义字符，所以需要用两个代表一个。例如System.out.println( &quot;\\&quot; ) ;只打印出一个&quot;\&quot;。但是&apos;\&apos;也是正则表达式中的转义字符（replaceAll 的参数就是正则表达式），需要用两个代表一个。所以：\\\\被java转换成\\,\\又被正则表达式转换成\。 
</code></pre><ol>
<li>CODE: \\\\ </li>
<li>Java: \\ </li>
<li>Regex: \ </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是java语言中的replace的用法&quot;&gt;&lt;a href=&quot;#今天要分享的内容是java语言中的replace的用法&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是java语言中的replace的用法&quot;&gt;&lt;/a&gt;今天要分享
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis学习系列之——介绍篇</title>
    <link href="http://ghohankawk.github.io/2017/06/02/redis-jieshao/"/>
    <id>http://ghohankawk.github.io/2017/06/02/redis-jieshao/</id>
    <published>2017-06-02T05:42:48.686Z</published>
    <updated>2017-06-02T05:58:20.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是redis背景介绍"><a href="#今天要分享的内容是redis背景介绍" class="headerlink" title="今天要分享的内容是redis背景介绍"></a>今天要分享的内容是redis背景介绍</h1><h1 id="Redis-背景介绍"><a href="#Redis-背景介绍" class="headerlink" title="Redis 背景介绍"></a>Redis 背景介绍</h1><ul>
<li><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
</li>
<li><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
</li>
<li>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</li>
<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<h1 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h1><ul>
<li><p>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</p>
</li>
<li><p>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</p>
</li>
<li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<h1 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h1>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</li>
</ul>
<ol>
<li>String（字符串）<br>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</li>
</ol>
<p>注意：一个键最大能存储512MB。</p>
<ol>
<li>Hash（哈希）<br>Redis hash 是一个键值对集合。</li>
</ol>
<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<p>每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>
<ol>
<li>List（列表）<br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</li>
</ol>
<p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>
<ol>
<li>Set（集合）<br>Redis的Set是string类型的无序集合。</li>
</ol>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<ol>
<li>zset(sorted set：有序集合)<br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是redis背景介绍&quot;&gt;&lt;a href=&quot;#今天要分享的内容是redis背景介绍&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是redis背景介绍&quot;&gt;&lt;/a&gt;今天要分享的内容是redis背景介绍&lt;/h1&gt;&lt;h1 id=&quot;R
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis学习系列之——安装篇</title>
    <link href="http://ghohankawk.github.io/2017/06/01/redis-anzhuang/"/>
    <id>http://ghohankawk.github.io/2017/06/01/redis-anzhuang/</id>
    <published>2017-06-01T07:04:04.246Z</published>
    <updated>2017-06-01T07:10:07.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是redis的使用安装篇"><a href="#今天要分享的内容是redis的使用安装篇" class="headerlink" title="今天要分享的内容是redis的使用安装篇"></a>今天要分享的内容是redis的使用安装篇</h1><p>这里主要分享，Windows下的安装使用，其他的系统，自己找</p>
<h1 id="Window-下安装"><a href="#Window-下安装" class="headerlink" title="Window 下安装"></a>Window 下安装</h1><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/3B8D633F-14CE-42E3-B174-FCCD48B11FF3.jpg" alt=""><br>下载地址：<a href="https://github.com/MSOpenTech/redis/releases。" target="_blank" rel="external">https://github.com/MSOpenTech/redis/releases。</a><br>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。</p>
<h1 id="安装步骤二，启动服务器"><a href="#安装步骤二，启动服务器" class="headerlink" title="安装步骤二，启动服务器"></a>安装步骤二，启动服务器</h1><p>打开一个 cmd 窗口 使用cd命令切换目录到 C:\redis 运行 redis-server.exe redis.windows.conf 。<br>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：<br><img src="http://www.runoob.com/wp-content/uploads/2014/11/redis-install1.png" alt=""></p>
<h1 id="安装步骤三，启动客户端"><a href="#安装步骤三，启动客户端" class="headerlink" title="安装步骤三，启动客户端"></a>安装步骤三，启动客户端</h1><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。<br>设置键值对 set myKey abc<br>取出键值对 get myKey<br><img src="http://www.runoob.com/wp-content/uploads/2014/11/redis-install2.jpg" alt=""></p>
<p>顺便附带一个<a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="external">菜鸟redis教程传送门</a></p>
<h1 id="最后强调一句，默认的数据是存储在db0里面"><a href="#最后强调一句，默认的数据是存储在db0里面" class="headerlink" title="最后强调一句，默认的数据是存储在db0里面"></a>最后强调一句，默认的数据是存储在db0里面</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是redis的使用安装篇&quot;&gt;&lt;a href=&quot;#今天要分享的内容是redis的使用安装篇&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是redis的使用安装篇&quot;&gt;&lt;/a&gt;今天要分享的内容是redis的使用安装篇&lt;/h1&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客文章模板</title>
    <link href="http://ghohankawk.github.io/2017/05/27/article/"/>
    <id>http://ghohankawk.github.io/2017/05/27/article/</id>
    <published>2017-05-27T06:02:34.814Z</published>
    <updated>2017-05-27T06:59:20.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天要分享的内容是。。。"><a href="#今天要分享的内容是。。。" class="headerlink" title="今天要分享的内容是。。。"></a>今天要分享的内容是。。。</h1><p>xxxxxxxxxx</p>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>正常说明，要干什么，再加一个链接按钮 <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">xxx</a>. </p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><ul>
<li>第一点好处</li>
<li>第一点好处</li>
<li>第一点好处</li>
</ul>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><pre><code>tab键，直接加底色，正常说明，顺便加一个加黑。
</code></pre><p>   <strong>好黑啊</strong></p>
<h1 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h1><p>想要加一张图片<br><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p>
<h1 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h1><p>想要加原生代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">            body&#123;font-size:14px;color:#444;font-family: "Microsoft Yahei", Tahoma, "Hiragino Sans GB", Arial;background:#fff;&#125;</div><div class="line">            ul&#123;list-style: none;&#125;</div><div class="line">            img&#123;border:none;vertical-align: middle;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h1><p>相要加个高亮<br>执行命令：<code>npm install marked</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天要分享的内容是。。。&quot;&gt;&lt;a href=&quot;#今天要分享的内容是。。。&quot; class=&quot;headerlink&quot; title=&quot;今天要分享的内容是。。。&quot;&gt;&lt;/a&gt;今天要分享的内容是。。。&lt;/h1&gt;&lt;p&gt;xxxxxxxxxx&lt;/p&gt;
&lt;h1 id=&quot;第一部分&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片测试</title>
    <link href="http://ghohankawk.github.io/2017/05/27/picTest/"/>
    <id>http://ghohankawk.github.io/2017/05/27/picTest/</id>
    <published>2017-05-27T05:24:03.940Z</published>
    <updated>2017-05-27T05:27:28.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这里面没内容"><a href="#这里面没内容" class="headerlink" title="这里面没内容"></a>这里面没内容</h1><p>   只是为了测试一下，图片能否直接展示在首页里面<br><img src="http://kenshin.hk/blog/movie/2016/kiminona/kiminona-02.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;这里面没内容&quot;&gt;&lt;a href=&quot;#这里面没内容&quot; class=&quot;headerlink&quot; title=&quot;这里面没内容&quot;&gt;&lt;/a&gt;这里面没内容&lt;/h1&gt;&lt;p&gt;   只是为了测试一下，图片能否直接展示在首页里面&lt;br&gt;&lt;img src=&quot;http://kenshin.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新博客版本升级</title>
    <link href="http://ghohankawk.github.io/2017/05/27/newBlog/"/>
    <id>http://ghohankawk.github.io/2017/05/27/newBlog/</id>
    <published>2017-05-27T04:50:09.050Z</published>
    <updated>2017-05-27T05:21:56.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为啥升级博客？"><a href="#为啥升级博客？" class="headerlink" title="为啥升级博客？"></a>为啥升级博客？</h1><p>   之前做完了ppt分享后，威哥触动了我，重新维护改造一下，以后记录工作生活点滴，今天庆祝复活了   </p>
<h1 id="升级说明"><a href="#升级说明" class="headerlink" title="升级说明"></a>升级说明</h1><p>   主要有以下的改造   </p>
<ul>
<li>外观改造，去掉了那些无用的评论，统计，因为实际确实没啥人关注</li>
<li>改完了外观清晰，简单的界面，去掉了那些标签功能，只要是方便自己看</li>
<li>另外增加了，关于我的部分，按照个人的喜好进行了改编</li>
</ul>
<p>对了，明天就要端午节放假啦，提前来张图庆祝一下，请收下</p>
<p><script src="https://source.pixiv.net/source/embed.js" data-id="63090620_47249e28b3d64ab364938a0dfbb60af5" data-size="large" data-border="on" charset="utf-8"></script><noscript><p><a href="https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=63090620" target="_blank">端午節ちまき</a> by <a href="https://www.pixiv.net/member.php?id=266106" target="_blank">兔姬</a> on <a href="https://www.pixiv.net/" target="_blank">pixiv</a></p></noscript></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为啥升级博客？&quot;&gt;&lt;a href=&quot;#为啥升级博客？&quot; class=&quot;headerlink&quot; title=&quot;为啥升级博客？&quot;&gt;&lt;/a&gt;为啥升级博客？&lt;/h1&gt;&lt;p&gt;   之前做完了ppt分享后，威哥触动了我，重新维护改造一下，以后记录工作生活点滴，今天庆祝复活了 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://ghohankawk.github.io/2017/05/26/markdown/"/>
    <id>http://ghohankawk.github.io/2017/05/26/markdown/</id>
    <published>2017-05-26T11:13:43.301Z</published>
    <updated>2017-05-15T11:39:09.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p>
<p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/bower/v/editor.md.svg" alt=""></p>
<p><strong>目录 (Table of Contents)</strong></p>
<p>[TOCM]</p>
<p>[TOC]</p>
<h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr>
<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>
<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>
<p><strong>缩写(同HTML的abbr标签)</strong></p>
<blockquote>
<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>
</blockquote>
<p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p>
<h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote>
<p>引用文本 Blockquotes</p>
</blockquote>
<p>引用的行内混合 Blockquotes</p>
<blockquote>
<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="external">普通链接</a>。</p>
</blockquote>
<h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="external">普通链接</a></p>
<p><a href="http://localhost/" title="普通链接带标题" target="_blank" rel="external">普通链接带标题</a></p>
<p>直接链接：<a href="https://github.com" target="_blank" rel="external">https://github.com</a></p>
<p><a href="http://www.this-anchor-link.com/" target="_blank" rel="external">锚点链接</a> </p>
<p><a href="mailto:test.test@gmail.com" target="_blank" rel="external">mailto:test.test@gmail.com</a></p>
<p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p>
<blockquote>
<p>@pandao</p>
</blockquote>
<h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>
<h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>
<pre><code>&lt;?php
    echo &quot;Hello world!&quot;;
?&gt;
</code></pre><p>预格式化文本：</p>
<pre><code>| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码　"></a>JS代码　</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> box = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> box.fn.init();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    box.prototype = box.fn = &#123;</div><div class="line">        <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'box.init()'</span>);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">		<span class="attr">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">			alert(<span class="string">"add"</span>, str);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line"></div><div class="line">		<span class="attr">remove</span> : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">			alert(<span class="string">"remove"</span>, str);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    box.fn.init.prototype = box.fn;</div><div class="line">    </div><div class="line">    <span class="built_in">window</span>.box =box;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> testBox = box();</div><div class="line">testBox.add(<span class="string">"jQuery"</span>).remove(<span class="string">"jQuery"</span>);</div></pre></td></tr></table></figure>
<h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">            body&#123;font-size:14px;color:#444;font-family: "Microsoft Yahei", Tahoma, "Hiragino Sans GB", Arial;background:#fff;&#125;</div><div class="line">            ul&#123;list-style: none;&#125;</div><div class="line">            img&#123;border:none;vertical-align: middle;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p>
<p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" alt=""></p>
<blockquote>
<p>Follow your heart.</p>
</blockquote>
<p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" alt=""></p>
<blockquote>
<p>图为：厦门白城沙滩</p>
</blockquote>
<p>图片加链接 (Image + Link)：</p>
<p><a href="https://pandao.github.io/editor.md/images/7.jpg" title="李健首张专辑《似水流年》封面" target="_blank" rel="external"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" alt=""></a></p>
<blockquote>
<p>图为：李健首张专辑《似水流年》封面</p>
</blockquote>
<hr>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>
<li>列表一</li>
<li>列表二<ul>
<li>列表二-1</li>
<li>列表二-2</li>
<li>列表二-3</li>
</ul>
</li>
<li>列表三<ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
</li>
</ul>
<h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol>
<li>第一行</li>
<li>第二行</li>
<li>第三行</li>
</ol>
<h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul>
<li>[x] GFM task list 1</li>
<li>[x] GFM task list 2</li>
<li>[ ] GFM task list 3<ul>
<li>[ ] GFM task list 3-1</li>
<li>[ ] GFM task list 3-2</li>
<li>[ ] GFM task list 3-3</li>
</ul>
</li>
<li>[ ] GFM task list 4<ul>
<li>[ ] GFM task list 4-1</li>
<li>[ ] GFM task list 4-2</li>
</ul>
</li>
</ul>
<hr>
<h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell </td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help()</code></td>
<td>Display the help window.</td>
</tr>
<tr>
<td><code>destroy()</code></td>
<td><strong>Destroy your computer!</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">Left-Aligned</th>
<th style="text-align:center">Center Aligned</th>
<th style="text-align:right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">col 3 is</td>
<td style="text-align:center">some wordy text</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td style="text-align:left">col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td style="text-align:left">zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Item</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>Phone</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>Pipe</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>
<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>
<p>18&ordm;C  &quot;  &apos;</p>
<p>[========]</p>
<h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote>
<p>Blockquotes :star:</p>
</blockquote>
<h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>
<li>[x] :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>
<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>
<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>
<li>[ ] []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao; </li>
<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>
<li>[ ] :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li>
<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li>
</ul>
</li>
</ul>
<h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>
<p>[========]</p>
<h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>
<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>
<p>$$x &gt; y$$</p>
<p>$$(\sqrt{3x-1}+(1+x)^2)$$</p>
<p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p>
<p>多行公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\displaystyle</div><div class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</div><div class="line">\leq</div><div class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</div><div class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">\displaystyle </div><div class="line">    \frac&#123;1&#125;&#123;</div><div class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</div><div class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</div><div class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</div><div class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</div><div class="line">         &#123;1+\cdots&#125; &#125;</div><div class="line">        &#125; </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f(x) = \int_&#123;-\infty&#125;^\infty</div><div class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</div><div class="line">    \,d\xi</div></pre></td></tr></table></figure>
<h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote>
<p>Print Test: Ctrl + P</p>
</blockquote>
<p>[========]</p>
<h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 用户登陆</div><div class="line">op=&gt;operation: 登陆操作</div><div class="line">cond=&gt;condition: 登陆成功 Yes or No?</div><div class="line">e=&gt;end: 进入后台</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<p>[========]</p>
<h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Andrew-&gt;China: Says Hello </div><div class="line">Note right of China: China thinks\nabout it </div><div class="line">China--&gt;Andrew: How are you? </div><div class="line">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/gith
    
    </summary>
    
      <category term="test" scheme="http://ghohankawk.github.io/categories/test/"/>
    
    
      <category term="test" scheme="http://ghohankawk.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ghohankawk.github.io/2017/05/26/hello-world/"/>
    <id>http://ghohankawk.github.io/2017/05/26/hello-world/</id>
    <published>2017-05-26T08:52:33.572Z</published>
    <updated>2017-05-26T08:52:33.572Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
